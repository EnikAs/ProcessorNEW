DEF_CMD(16, PUSH, 1, 
if (cmd.reg == 1)
        {
            tmp_reg = *((char*)(cpu->data + cpu->ip));
            cpu->ip += 1;
            if (cmd.konst == 1)
            {
                tmp_int = *((cpu_val*)(cpu->data + cpu->ip));
                cpu->ip += sizeof(cpu_val);

                if (cmd.ram == 1)
                {
                    sleep(1);
                    tmp_ram = cpu->ram[(int)tmp_int + (int)cpu->reg[tmp_reg]];
                    StackPush(&cpu->stk, tmp_ram);
                    return CORRECT;
                }
                StackPush(&cpu->stk, tmp_int + cpu->reg[tmp_reg]);
                return CORRECT;
            }

            else if (cmd.ram == 1)
            {
                sleep(1);
                tmp_ram = cpu->ram[(int)cpu->reg[tmp_reg]];
                StackPush(&cpu->stk, tmp_ram);
                return CORRECT;
            }
            StackPush(&cpu->stk, cpu->reg[tmp_reg]);
            return CORRECT;
        }

        tmp_int = *((cpu_val*)(cpu->data + cpu->ip));
        cpu->ip += sizeof(cpu_val);

        if (cmd.ram == 1)
        {   
            sleep(1);
            StackPush(&cpu->stk, cpu->ram[(int)tmp_int]);

            return CORRECT;
        }
        StackPush(&cpu->stk, tmp_int);
        return CORRECT;)

DEF_CMD(15, POP, 1,  
if (cmd.reg == 1)
        {
            tmp_reg = *((char*)(cpu->data + cpu->ip));
            cpu->ip += 1;
            if (cmd.konst == 1)
            {
                tmp_int = *((cpu_val*)(cpu->data + cpu->ip));
                cpu->ip += sizeof(cpu_val);

                if (cmd.ram == 1)
                {
                    sleep(1);
                    cpu->ram[(int)tmp_int + (int)cpu->reg[tmp_reg]] = StackPop(&cpu->stk);

                    return CORRECT;
                }
                return CODE_INCORRECT_INPUT;
            }

            else if (cmd.ram == 1)
            {
                sleep(1);
                cpu->ram[(int)cpu->reg[tmp_reg]] = StackPop(&cpu->stk);
                return CORRECT;
            }

            cpu->reg[tmp_reg] = StackPop(&cpu->stk);    
            return CORRECT;
        }

        tmp_int = *((cpu_val*)(cpu->data + cpu->ip));
        cpu->ip += sizeof(cpu_val);

        if (cmd.ram == 1)
        {   
            sleep(1);
            cpu->ram[(int)tmp_int] = StackPop(&cpu->stk);

            return CORRECT;
        }
        
        return CODE_INCORRECT_INPUT;)

DEF_CMD(3, MUL, 0, 
cpu_val a = $POP;
cpu_val b = $POP;
$PUSH(a * b);)

DEF_CMD(4, DIV, 0,  
cpu_val a = $POP;
cpu_val b = $POP;
$PUSH(b / a);)

DEF_CMD(5, SUB, 0,  
cpu_val a = $POP;
cpu_val b = $POP;
$PUSH(b - a);)

DEF_CMD(6, ADD, 0,  
cpu_val a = $POP;
cpu_val b = $POP;
$PUSH(a + b);)

DEF_CMD(7, OUT, 0,  
StackDtor(&cpu->stk);)

DEF_CMD(9, IN, 0, 
cpu_val a = 0;
scanf("%lf", &a);
$PUSH(a);)

DEF_CMD(10, JMP, 1, 
SETIP
return CORRECT;)

DEF_CMD(11, PRCH, 0, 
cpu_val a = 0 ;
a = StackPop(&cpu->stk);
printf("value = %lf\n", a);
return CORRECT;)

DEF_CMD(12, CALL, 1,
$PUSH(cpu->ip + sizeof(cpu_val));
SETIP
return CORRECT;)

DEF_CMD(13, RET, 0, 
cpu->ip = $POP;
return CORRECT;)

DEF_CMD(14, HLT, 0, 
return END_OF_PROG;)

DEF_CMD(17, VRAMPR, 0, 
for(int i = 0 ; i < 50; i++ )
{
    for(int j = 0 ; j < 50; j++)
    {
        if(cpu->ram[RAM_SIZE + 50 * i + j] == 0)
        {
            printf("..");
        }
        else 
            printf("**");
    }
    printf("\n");
})

DEF_CMD(18, JA, 1,  
cpu_val a = $POP;
cpu_val b = $POP;
if (a > b)
{
    SETIP
}
else 
    cpu->ip += sizeof(cpu_val);
)

DEF_CMD(19, JAE, 1,  
cpu_val a = $POP;
cpu_val b = $POP;
if (a >= b)
{
    SETIP
}
else 
    cpu->ip += sizeof(cpu_val);
)

DEF_CMD(20, JB, 1,  
cpu_val a = $POP;
cpu_val b = $POP;
if (a < b)
{
    SETIP
}
else 
    cpu->ip += sizeof(cpu_val);
)

DEF_CMD(21, JBE, 1,  
cpu_val a = $POP;
cpu_val b = $POP;
if ( b - a >= EPSILON )
{
    SETIP
}
else 
    cpu->ip += sizeof(cpu_val);
)

DEF_CMD(22, JE, 1,  
cpu_val a = $POP;
cpu_val b = $POP;
if (a - b == 0)
{
    SETIP
}
else
{ 
    cpu->ip += sizeof(cpu_val);  
})

DEF_CMD(23, JNE, 1,  
cpu_val a = $POP;
cpu_val b = $POP;
if (a != b)
{
    SETIP
}
else 
    cpu->ip += sizeof(cpu_val);
)

DEF_CMD(24, SQRT, 0,
cpu_val a = $POP;
a = sqrt(a);    
$PUSH(a);
)

DEF_CMD(25, VRAM, 0,
cpu_val a = $POP;
cpu_val b = $POP;
cpu->ram[RAM_SIZE + 50 * (int)a + (int)b] = 1; 
)

DEF_CMD(8, INCORRECT_INPUT, 0,  
return CODE_INCORRECT_INPUT;)